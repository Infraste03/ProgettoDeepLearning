"""
This class defines a Discriminator model for a Conditional Generative Adversarial Network (cGAN) 
in PyTorch. The discriminator is responsible for distinguishing between real and generated images 
based on the conditional labels provided.

### Key Components:
1. **Initialization (`__init__`)**:
   - **Parameters**:
     - `ndf`: Number of filters in the initial convolutional layer.
     - `label_dim`: Number of dimensions for conditional labels.
   - **Network Architecture**:
     - **Image Block**: Processes the input image. It consists of:
       - `nn.Conv2d`: Convolution layer to extract features from the image.
       - `nn.LeakyReLU`: Activation function with a negative slope for handling negative inputs.
     - **Label Block**: Processes the conditional labels. It consists of:
       - `nn.Conv2d`: Convolution layer to extract features from the labels.
       - `nn.LeakyReLU`: Activation function.
     - **Main Block**: Consists of multiple convolutional layers to process the concatenated features from the image and label blocks. The layers include:
       - `nn.Conv2d`: Convolutions to further extract and downsample features.
       - `nn.BatchNorm2d`: Batch normalization for stabilizing training.
       - `nn.LeakyReLU`: Activation function.
       - Final `nn.Conv2d` layer to output a single score for each image.

2. **Forward Pass (`forward`)**:
   - **Inputs**:
     - `img`: Tensor of images with shape `[batch_size, 3, image_size, image_size]`.
     - `label`: Tensor of conditional labels with shape `[batch_size, label_dim, image_size, image_size]`.
   - **Process**:
     - Passes `img` through the `img_block` to extract image features.
     - Passes `label` through the `label_block` to extract label features.
     - Concatenates the outputs from `img_block` and `label_block` along the channel dimension.
     - Passes the concatenated feature maps through the `main` block to compute the final score.
     - Reshapes the output to `[batch_size, 1]` and computes the mean across the dimensions to obtain a single score for each image.
   - **Output**:
     - Returns a tensor of scores with shape `[batch_size]`, where each score represents the probability that the corresponding image is real.

### Usage:
This `Discriminator` class is used in a conditional GAN setting to evaluate the authenticity of images 
generated by the generator. It takes both images and conditional labels as inputs, processes them 
through separate blocks, concatenates the features, and outputs a score indicating whether the image 
is real or generated.
"""

# The `Discriminator` class in the code defines a neural network model for image classification with
# label information.

import torch
import torch.nn as nn
import torch.utils.data


class Discriminator(nn.Module):
        def __init__(self,ndf,label_dim):
            
            self.ndf = ndf
            self.label_dim = label_dim
            
            super(Discriminator, self).__init__()

            self.img_block = nn.Sequential(
                nn.Conv2d(3, self.ndf // 2, 4, 2, 1, bias=False),
                nn.LeakyReLU(0.2, inplace=True),
            )

            self.label_block = nn.Sequential(
                nn.Conv2d(self.label_dim, self.ndf // 2, 4, 2, 1, bias=False),
                nn.LeakyReLU(0.2, inplace=True),
            )

            self.main = nn.Sequential(
                nn.Conv2d(self.ndf, self.ndf * 2, 4, 2, 1, bias=False),
                nn.BatchNorm2d(self.ndf * 2),
                nn.LeakyReLU(0.2, inplace=True),
                nn.Conv2d(self.ndf * 2, self.ndf * 4, 4, 2, 1, bias=False),
                nn.BatchNorm2d(self.ndf * 4),
                nn.LeakyReLU(0.2, inplace=True),
                nn.Conv2d(self.ndf * 4, 1, 4, 1, 0, bias=False),
            )

        def forward(self, img, label):
            img_out = self.img_block(img)
            lab_out = self.label_block(label)
            x = torch.cat([img_out, lab_out], dim=1)
            x = self.main(x)
            return x.view(img.size(0), -1).mean(dim=1)